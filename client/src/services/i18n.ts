// Internationalization service for multiple languages
interface Translation {
  [key: string]: string | Translation
}

interface LanguageConfig {
  code: string
  name: string
  nativeName: string
  flag: string
  rtl: boolean
}

interface I18nConfig {
  defaultLanguage: string
  fallbackLanguage: string
  supportedLanguages: LanguageConfig[]
  translations: Record<string, Translation>
}

class I18nService {
  private config: I18nConfig
  private currentLanguage: string
  private translations: Translation = {}

  constructor() {
    this.config = this.getDefaultConfig()
    this.currentLanguage = this.detectLanguage()
    this.loadTranslations()
  }

  private getDefaultConfig(): I18nConfig {
    return {
      defaultLanguage: 'en',
      fallbackLanguage: 'en',
      supportedLanguages: [
        { code: 'en', name: 'English', nativeName: 'English', flag: 'ЁЯЗ║ЁЯЗ╕', rtl: false },
        { code: 'hi', name: 'Hindi', nativeName: 'рд╣рд┐рдиреНрджреА', flag: 'ЁЯЗоЁЯЗ│', rtl: false },
        { code: 'ta', name: 'Tamil', nativeName: 'родрооро┐ро┤рпН', flag: 'ЁЯЗоЁЯЗ│', rtl: false },
        { code: 'te', name: 'Telugu', nativeName: 'р░др▒Жр░▓р▒Бр░Чр▒Б', flag: 'ЁЯЗоЁЯЗ│', rtl: false },
        { code: 'bn', name: 'Bengali', nativeName: 'ржмрж╛ржВрж▓рж╛', flag: 'ЁЯЗоЁЯЗ│', rtl: false },
        { code: 'ml', name: 'Malayalam', nativeName: 'р┤ор┤▓р┤пр┤╛р┤│р┤В', flag: 'ЁЯЗоЁЯЗ│', rtl: false },
        { code: 'kn', name: 'Kannada', nativeName: 'р▓Хр▓ир│Нр▓ир▓б', flag: 'ЁЯЗоЁЯЗ│', rtl: false },
        { code: 'gu', name: 'Gujarati', nativeName: 'ркЧрлБркЬрк░рк╛ркдрлА', flag: 'ЁЯЗоЁЯЗ│', rtl: false },
        { code: 'mr', name: 'Marathi', nativeName: 'рдорд░рд╛рдареА', flag: 'ЁЯЗоЁЯЗ│', rtl: false },
        { code: 'pa', name: 'Punjabi', nativeName: 'рикрй░риЬри╛римрйА', flag: 'ЁЯЗоЁЯЗ│', rtl: false }
      ],
      translations: this.getDefaultTranslations()
    }
  }

  private getDefaultTranslations(): Record<string, Translation> {
    return {
      en: {
        // Navigation
        nav: {
          home: 'Home',
          about: 'About Us',
          services: 'Services',
          experts: 'Experts',
          centres: 'Centres',
          partners: 'Partners',
          resources: 'Resources',
          chatbot: 'Chatbot',
          community: 'Community',
          appointments: 'Appointments',
          admin: 'Admin',
          dashboard: 'Dashboard',
          moderation: 'Moderation'
        },
        // Hero Section
        hero: {
          badge: 'Trusted by 10,000+ students across India',
          title: 'Mental Wellness',
          subtitle: 'Made Simple',
          description: 'Professional support, AI assistance, and community connection for your mental health journey.',
          cta: 'Start your wellness journey today.',
          primaryButton: 'Get Started Free',
          secondaryButton: 'Watch Demo',
          trustIndicators: {
            users: '10K+ Active Users',
            shield: 'HIPAA Compliant',
            star: '4.9/5 Rating'
          },
          stats: {
            chatSessions: 'Chat Sessions',
            counselingSessions: 'Counseling Sessions',
            successRate: 'Success Rate',
            aiPowered: 'AI-powered support',
            professionalSupport: 'Professional support',
            studentSatisfaction: 'Student satisfaction'
          }
        },
        // Features Section
        features: {
          title: 'How we help',
          subtitle: 'Simple tools designed to support your mental wellness journey',
          ai: {
            title: 'AI Assistant',
            description: '24/7 mental health support with crisis detection',
            cta: 'Chat now'
          },
          community: {
            title: 'Peer Support',
            description: 'Anonymous forums for stigma-free connections',
            cta: 'Join community'
          },
          resources: {
            title: 'Resources',
            description: 'Curated mental health content and tools',
            cta: 'Explore resources'
          },
          signUpToAccess: 'Sign Up to Access'
        },
        // Testimonials
        testimonials: {
          title: 'What students say',
          subtitle: 'Real stories from students who found support and community'
        },
        // Company Slider
        companySlider: {
          title: 'Powering the best',
          subtitle: 'teams'
        },
        // Footer
        footer: {
          description: 'Mental wellness support for students across India. Professional care, AI assistance, and community connection.',
          links: {
            aiChat: 'AI Chat',
            community: 'Community',
            resources: 'Resources',
            privacy: 'Privacy',
            about: 'About'
          },
          copyright: 'All rights reserved. Made with тЭдя╕П for students.'
        },
        // Common
        common: {
          loading: 'Loading...',
          error: 'Something went wrong',
          retry: 'Try again',
          signIn: 'Sign In',
          signUp: 'Sign Up',
          getStarted: 'Get Started',
          learnMore: 'Learn More',
          contact: 'Contact',
          support: 'Support'
        }
      },
      hi: {
        // Hindi translations
        nav: {
          home: 'рд╣реЛрдо',
          about: 'рд╣рдорд╛рд░реЗ рдмрд╛рд░реЗ рдореЗрдВ',
          services: 'рд╕реЗрд╡рд╛рдПрдВ',
          experts: 'рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ',
          centres: 'рдХреЗрдВрджреНрд░',
          partners: 'рднрд╛рдЧреАрджрд╛рд░',
          resources: 'рд╕рдВрд╕рд╛рдзрди',
          chatbot: 'рдЪреИрдЯрдмреЙрдЯ',
          community: 'рд╕рдореБрджрд╛рдп',
          appointments: 'рдЕрдкреЙрдЗрдВрдЯрдореЗрдВрдЯ',
          admin: 'рдПрдбрдорд┐рди',
          dashboard: 'рдбреИрд╢рдмреЛрд░реНрдб',
          moderation: 'рд╕рдВрдпрдо'
        },
        hero: {
          badge: 'рднрд╛рд░рдд рднрд░ рдХреЗ 10,000+ рдЫрд╛рддреНрд░реЛрдВ рджреНрд╡рд╛рд░рд╛ рднрд░реЛрд╕реЗрдордВрдж',
          title: 'рдорд╛рдирд╕рд┐рдХ рдХрд▓реНрдпрд╛рдг',
          subtitle: 'рд╕рд░рд▓ рдмрдирд╛рдпрд╛ рдЧрдпрд╛',
          description: 'рдЖрдкрдХреА рдорд╛рдирд╕рд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдпрд╛рддреНрд░рд╛ рдХреЗ рд▓рд┐рдП рдкреЗрд╢реЗрд╡рд░ рд╕рд╣рд╛рдпрддрд╛, AI рд╕рд╣рд╛рдпрддрд╛ рдФрд░ рд╕рдореБрджрд╛рдп рдХрдиреЗрдХреНрд╢рдиред',
          cta: 'рдЖрдЬ рд╣реА рдЕрдкрдиреА рдХрд▓реНрдпрд╛рдг рдпрд╛рддреНрд░рд╛ рд╢реБрд░реВ рдХрд░реЗрдВред',
          primaryButton: 'рдореБрдлреНрдд рдореЗрдВ рд╢реБрд░реВ рдХрд░реЗрдВ',
          secondaryButton: 'рдбреЗрдореЛ рджреЗрдЦреЗрдВ',
          trustIndicators: {
            users: '10K+ рд╕рдХреНрд░рд┐рдп рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛',
            shield: 'HIPAA рдЕрдиреБрдкрд╛рд▓рд┐рдд',
            star: '4.9/5 рд░реЗрдЯрд┐рдВрдЧ'
          },
          stats: {
            chatSessions: 'рдЪреИрдЯ рд╕рддреНрд░',
            counselingSessions: 'рдкрд░рд╛рдорд░реНрд╢ рд╕рддреНрд░',
            successRate: 'рд╕рдлрд▓рддрд╛ рджрд░',
            aiPowered: 'AI-рд╕рдВрдЪрд╛рд▓рд┐рдд рд╕рд╣рд╛рдпрддрд╛',
            professionalSupport: 'рдкреЗрд╢реЗрд╡рд░ рд╕рд╣рд╛рдпрддрд╛',
            studentSatisfaction: 'рдЫрд╛рддреНрд░ рд╕рдВрддреБрд╖реНрдЯрд┐'
          }
        },
        features: {
          title: 'рд╣рдо рдХреИрд╕реЗ рдорджрдж рдХрд░рддреЗ рд╣реИрдВ',
          subtitle: 'рдЖрдкрдХреА рдорд╛рдирд╕рд┐рдХ рдХрд▓реНрдпрд╛рдг рдпрд╛рддреНрд░рд╛ рдХрд╛ рд╕рдорд░реНрдерди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдбрд┐рдЬрд╝рд╛рдЗрди рдХрд┐рдП рдЧрдП рд╕рд░рд▓ рдЙрдкрдХрд░рдг',
          ai: {
            title: 'AI рд╕рд╣рд╛рдпрдХ',
            description: 'рд╕рдВрдХрдЯ рдкрд╣рдЪрд╛рди рдХреЗ рд╕рд╛рде 24/7 рдорд╛рдирд╕рд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╣рд╛рдпрддрд╛',
            cta: 'рдЕрднреА рдЪреИрдЯ рдХрд░реЗрдВ'
          },
          community: {
            title: 'рд╕рд╛рдереА рд╕рд╣рд╛рдпрддрд╛',
            description: 'рдХрд▓рдВрдХ-рдореБрдХреНрдд рдХрдиреЗрдХреНрд╢рди рдХреЗ рд▓рд┐рдП рдЧреБрдордирд╛рдо рдлреЛрд░рдо',
            cta: 'рд╕рдореБрджрд╛рдп рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реЛрдВ'
          },
          resources: {
            title: 'рд╕рдВрд╕рд╛рдзрди',
            description: 'рдХреНрдпреВрд░реЗрдЯреЗрдб рдорд╛рдирд╕рд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╛рдордЧреНрд░реА рдФрд░ рдЙрдкрдХрд░рдг',
            cta: 'рд╕рдВрд╕рд╛рдзрдиреЛрдВ рдХрд╛ рдЕрдиреНрд╡реЗрд╖рдг рдХрд░реЗрдВ'
          },
          signUpToAccess: 'рдкрд╣реБрдВрдЪ рдХреЗ рд▓рд┐рдП рд╕рд╛рдЗрди рдЕрдк рдХрд░реЗрдВ'
        },
        testimonials: {
          title: 'рдЫрд╛рддреНрд░ рдХреНрдпрд╛ рдХрд╣рддреЗ рд╣реИрдВ',
          subtitle: 'рдЫрд╛рддреНрд░реЛрдВ рдХреА рд╡рд╛рд╕реНрддрд╡рд┐рдХ рдХрд╣рд╛рдирд┐рдпрд╛рдВ рдЬрд┐рдиреНрд╣реЗрдВ рд╕рд╣рд╛рдпрддрд╛ рдФрд░ рд╕рдореБрджрд╛рдп рдорд┐рд▓рд╛'
        },
        companySlider: {
          title: 'рд╕рд░реНрд╡рд╢реНрд░реЗрд╖реНрда рдХреЛ рд╢рдХреНрддрд┐ рдкреНрд░рджрд╛рди рдХрд░рдирд╛',
          subtitle: 'рдЯреАрдореЗрдВ'
        },
        footer: {
          description: 'рднрд╛рд░рдд рднрд░ рдХреЗ рдЫрд╛рддреНрд░реЛрдВ рдХреЗ рд▓рд┐рдП рдорд╛рдирд╕рд┐рдХ рдХрд▓реНрдпрд╛рдг рд╕рд╣рд╛рдпрддрд╛ред рдкреЗрд╢реЗрд╡рд░ рджреЗрдЦрднрд╛рд▓, AI рд╕рд╣рд╛рдпрддрд╛ рдФрд░ рд╕рдореБрджрд╛рдп рдХрдиреЗрдХреНрд╢рдиред',
          links: {
            aiChat: 'AI рдЪреИрдЯ',
            community: 'рд╕рдореБрджрд╛рдп',
            resources: 'рд╕рдВрд╕рд╛рдзрди',
            privacy: 'рдЧреЛрдкрдиреАрдпрддрд╛',
            about: 'рд╣рдорд╛рд░реЗ рдмрд╛рд░реЗ рдореЗрдВ'
          },
          copyright: 'рд╕рднреА рдЕрдзрд┐рдХрд╛рд░ рд╕реБрд░рдХреНрд╖рд┐рддред рдЫрд╛рддреНрд░реЛрдВ рдХреЗ рд▓рд┐рдП тЭдя╕П рдХреЗ рд╕рд╛рде рдмрдирд╛рдпрд╛ рдЧрдпрд╛ред'
        },
        common: {
          loading: 'рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...',
          error: 'рдХреБрдЫ рдЧрд▓рдд рд╣реБрдЖ',
          retry: 'рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ',
          signIn: 'рд╕рд╛рдЗрди рдЗрди',
          signUp: 'рд╕рд╛рдЗрди рдЕрдк',
          getStarted: 'рд╢реБрд░реВ рдХрд░реЗрдВ',
          learnMore: 'рдФрд░ рдЬрд╛рдиреЗрдВ',
          contact: 'рд╕рдВрдкрд░реНрдХ',
          support: 'рд╕рд╣рд╛рдпрддрд╛'
        }
      }
      // Add more languages as needed
    }
  }

  private detectLanguage(): string {
    // Check localStorage first
    if (typeof window !== 'undefined') {
      const stored = localStorage.getItem('preferred-language')
      if (stored && this.isLanguageSupported(stored)) {
        return stored
      }

      // Check browser language
      const browserLang = navigator.language.split('-')[0]
      if (this.isLanguageSupported(browserLang)) {
        return browserLang
      }
    }

    return this.config.defaultLanguage
  }

  private isLanguageSupported(langCode: string): boolean {
    return this.config.supportedLanguages.some(lang => lang.code === langCode)
  }

  private loadTranslations() {
    this.translations = this.config.translations[this.currentLanguage] || 
                       this.config.translations[this.config.fallbackLanguage] || 
                       {}
  }

  // Set current language
  setLanguage(langCode: string) {
    if (this.isLanguageSupported(langCode)) {
      this.currentLanguage = langCode
      this.loadTranslations()
      
      if (typeof window !== 'undefined') {
        localStorage.setItem('preferred-language', langCode)
        document.documentElement.lang = langCode
        
        // Update RTL if needed
        const language = this.config.supportedLanguages.find(l => l.code === langCode)
        if (language) {
          document.documentElement.dir = language.rtl ? 'rtl' : 'ltr'
        }
      }
    }
  }

  // Get translation
  t(key: string, params?: Record<string, string | number>): string {
    const keys = key.split('.')
    let value: any = this.translations

    for (const k of keys) {
      if (value && typeof value === 'object' && k in value) {
        value = value[k]
      } else {
        // Fallback to English
        value = this.config.translations[this.config.fallbackLanguage]
        for (const fallbackKey of keys) {
          if (value && typeof value === 'object' && fallbackKey in value) {
            value = value[fallbackKey]
          } else {
            return key // Return key if translation not found
          }
        }
        break
      }
    }

    if (typeof value !== 'string') {
      return key
    }

    // Replace parameters
    if (params) {
      return value.replace(/\{\{(\w+)\}\}/g, (match, param) => {
        return params[param]?.toString() || match
      })
    }

    return value
  }

  // Get current language
  getCurrentLanguage(): string {
    return this.currentLanguage
  }

  // Get supported languages
  getSupportedLanguages(): LanguageConfig[] {
    return this.config.supportedLanguages
  }

  // Get current language config
  getCurrentLanguageConfig(): LanguageConfig | undefined {
    return this.config.supportedLanguages.find(lang => lang.code === this.currentLanguage)
  }

  // Check if current language is RTL
  isRTL(): boolean {
    const config = this.getCurrentLanguageConfig()
    return config?.rtl || false
  }
}

// Create singleton instance
export const i18n = new I18nService()

// Hook for React components
export const useI18n = () => {
  return {
    t: i18n.t.bind(i18n),
    setLanguage: i18n.setLanguage.bind(i18n),
    getCurrentLanguage: i18n.getCurrentLanguage.bind(i18n),
    getSupportedLanguages: i18n.getSupportedLanguages.bind(i18n),
    getCurrentLanguageConfig: i18n.getCurrentLanguageConfig.bind(i18n),
    isRTL: i18n.isRTL.bind(i18n)
  }
}

export default i18n
